'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = provideProps;

var _react = require('react');

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createComponent(providerName, fn, propTypes, contextTypes, customStatics, Component) {
  for (var _len = arguments.length, args = Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
    args[_key - 6] = arguments[_key];
  }

  function Provider(props, context) {
    return (0, _react.createElement)(Component, _extends({}, props, fn.apply(undefined, [props, context].concat(args))));
  }

  var componentName = Component.displayName || Component.name;
  Provider.displayName = '' + providerName + componentName;

  (0, _hoistNonReactStatics2.default)(Provider, Component, customStatics);

  if (contextTypes) {
    Provider.contextTypes = contextTypes;
  }

  if (propTypes) {
    Component.propTypes = _extends({}, Component.propTypes, propTypes);
  }

  return Provider;
}

function provideProps(providerName, fn, propTypes, contextTypes, customStatics) {
  if (!fn) {
    throw new Error('fn is undefined');
  }

  if (!providerName) {
    throw new Error('Name is undefined');
  }

  return function provider(Component) {
    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    // support for decorator pattern
    if (typeof Component !== 'function') {
      return function (ComponentToDecorate) {
        return createComponent.apply(undefined, [providerName, fn, propTypes, contextTypes, customStatics, ComponentToDecorate, Component].concat(args));
      };
    }

    return createComponent.apply(undefined, [providerName, fn, propTypes, contextTypes, customStatics, Component].concat(args));
  };
}